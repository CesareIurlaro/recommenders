<!--<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?> -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "http://www.docbook.org/xml/5.0/dtd/docbook.dtd">
<chapter id="usr" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>User Manual</title>
    <section>
        <title>What is Code Recommenders?</title>
        <para>Code Recommenders supports developers learning new APIs by providing tools which learn correct API usages
            or valuable patterns by analyzing example code and re-integrates this knowledge back into your IDE.
        </para>
        <para>Put differently, it helps your team to cut down development costs when dealing with new APIs by means of
            intelligent code completion, extended documentation, smart bug detection systems and others - all powered by
            the knowledge of the programming masses.
        </para>
        <para>
            Code Recommenders is a
            <emphasis>set</emphasis>
            of IDE extensions for the Java programming language. In version 1.0, recommenders consists of two large
            component groups:
            <itemizedlist>
                <listitem>
                    <para>5 Intelligent Code Completion Engines,
                    </para>
                </listitem>
                <listitem>
                    <para>4 Extended Documentation Providers,</para>
                </listitem>
            </itemizedlist>
            which will be introduced in detail below.
        </para>
    </section>
    <section>
        <title>Recommenders' Code Completion Engines</title>
        <section>
            <title>Intelligent Call Completion</title>
            <para>
                The intelligent call completion engine probably illustrates the idea of Code Recommenders best. When
                dealing with Framework APIs, developers frequently have to deal with complex APIs. For illustration,
                consider the public API of
                <classname>javax.swing.JButton</classname>
                which consists of
                <emphasis>381</emphasis>
                public methods. A huge API of which a developer typically only has to know a small subset. The
                remaining, say, 360 methods bloat the API (from a API user's viewpoint) and thus unnecessarily increase
                the complexity of learning and using this API.
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/api-jbutton.png" />
                    </imageobject>
                    <caption>
                        <para>
                            All potential completions for
                            <classname>JButton</classname>
                        </para>
                    </caption>
                </mediaobject>
            </para>
            <para>
                This is where Code Recommenders intelligent call completion comes in. It assists developers by
                recommending him only those methods that are actually relevant for his task at hand. For instance, given
                that a developer just created a text widget makes it obvious for Code Recommenders which methods a
                developer wants to use next - even if the developer doesn't know it by himself:
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/calls-text.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Recommenders' Intelligent Completion on SWT Text after calling
                            <code>new Text()</code>
                        </para>
                    </caption>
                </mediaobject>
            </para>
            <para>
                At the time of writing this section (1.0.0.rc2), Code Recommenders partially supports the Java Standard
                Library, namely the main packages under
                <package>java.*</package>
                and some packages under
                <package>javax.*</package>
                . As the recommendation models are generated from the Eclipse Juno Release Train code base only,
                packages like
                <package>java.awt</package>
                or
                <package>javax.swing</package>
                are not supported as no data was available at generation time. For a detailed list of which libraries or
                packages are supported, check the reports section on the Code Recommenders home page.
            </para>
            <section>
                <title>Configuration
                </title>
                <para>
                    Code Recommenders intelligent completion engines can be enabled and disabled in its preference page:
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="media/figures/usr/completion/calls-preferences.png" />
                        </imageobject>
                        <caption>
                            <para>Call Completion Preference Page
                            </para>
                        </caption>
                    </mediaobject>
                    Furthermore, how many proposals Recommenders computes as well as some recommendation model
                    information can be configured here too.
                    <variablelist>
                        <varlistentry>
                            <term></term>
                            <listitem>
                                <para></para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
            </section>
        </section>
        <section>
            <title>Intelligent Code Templates (single-object, no-order)</title>
            <para>
                Code templates are helpful when code is needed to iterate over an array of objects or when creating a
                getter for a property of a class. But code templates
                <emphasis>really</emphasis>
                shine when developers have to use APIs they are not very familiar with. Then, code templates serve as
                additional documentation that quickly shows how an API can be used and save developers lot of time
                otherwise needed for reading API documentation.
            </para>
            <para>
                Eclipse maintains more than 70 of such Java code templates - ranging from simple
                <code>for</code>
                loops up to complex API usage patterns like creating an SWT
                <classname>Button</classname>
                or
                <classname>Composite</classname>
                . Unfortunately, developing templates for API usage patterns is
                <emphasis>extremely</emphasis>
                costly and tedious - and in consequence only few templates for few APIs exist.
            </para>
            <para>
                This is where Code Recommenders comes in again. In the previous section we showed how to recommend
                single methods to invoke on an object. Templates completion takes this to the next level by recommending
                not only
                <emphasis>single</emphasis>
                methods but complete
                <emphasis>sets</emphasis>
                of methods:
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/templates-astparser.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Intelligent Template Completion on JDT
                            <classname>ASTParser</classname>
                        </para>
                    </caption>
                </mediaobject>
                As you probably have noticed in the example above, Recommenders' templates completion can be applied on
                existing variables to complete existing usages but also works on type names as the example below shows:
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/templates-tableviewer01.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Intelligent Template Completion on JFace
                            <classname>TableViewer</classname>
                        </para>
                    </caption>
                </mediaobject>
                The final result after applying the template looks as follows:
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/templates-tableviewer02.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Resulting code snippet for JFace
                            <classname>TableViewer</classname>
                        </para>
                    </caption>
                </mediaobject>
            </para>
            <warning>
                <para>The generated template proposals do not reflect method execution ordering constraints, i.e., the
                    order of the proposed method may have to be changed manually after insertion.
                </para>
            </warning>
            <section>
                <title>Configuration
                </title>
                <para> Template Completion yet has no configurable options. Note that Templates Completion can not be
                    run on the default content assist. As soon as it detects it was configured for default content
                    assist it immediately deactivates itself. This decision was made because of performance reasons.
                    Computing likely code snippets is a computation-intensive task developers should trigger explicitly.
                </para>
            </section>
        </section>
        <section>
            <title>Intelligent Overrides Completion</title>
            <para>
                Similar to recommending method calls, one can also recommend which methods a developer should typically
                override. This is what Recommenders intelligent overrides completion does. We'll discuss class extension
                patterns in more detail in the extended documentatiton chapter below.
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/overrides-dialog.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Recommenders' Intelligent Overrides Completion on JFace
                            <classname>Dialog</classname>
                        </para>
                    </caption>
                </mediaobject>
            </para>
            <section>
                <title>Configuration
                </title>
                <para>Intelligent Overrides Completion yet has no configurable options. It is enabled and disabled
                    together with Recommenders Call Completion, i.e., deactivating Code Recommenders content assist
                    category in JDT, will automatically disable Intelligent Overrides Completion.
                </para>
            </section>
        </section>
        <section>
            <title>Subwords Completion</title>
            <para>
                You probably know JDT's
                <emphasis>CamelCaseCompletion</emphasis>
                . This is a nice engine but requires you to remember exactly the uppercase letters of the completion
                proposal you want to insert. Subwords makes this more convenient. The idea is simple enough - you should
                not have to type a name from the beginning to find a match in the content assist popup. It helps when a
                developer doesn not know if one has to 'find' - or - 'get' an element.
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/subwords-compilationunit.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Recommenders' Subwords Completion on JDT's
                            <classname>CompilationUnit</classname>
                        </para>
                    </caption>
                </mediaobject>
            </para>
            <para>
                The feature is sophisticated enough to understand a rough shorthand e.g.
                <emphasis>dclr</emphasis>
                for
                <emphasis>declaration</emphasis>
                .
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/subwords-ast01.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Recommenders' Subwords Completion Completion on JDT's
                            <classname>AST</classname>
                        </para>
                    </caption>
                </mediaobject>
            </para>
            <para>
                It is also sophisticated enough to understand that a method or type name in Java is composed of several
                words e.g.
                <emphasis>'ty + dclr'</emphasis>
                finds all 'type' + 'declarations'.
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/subwords-ast02.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Recommenders' Subwords Completion Completion on JDT's
                            <classname>AST</classname>
                        </para>
                    </caption>
                </mediaobject>
                <note>
                    <para>
                        Subwords does not fall into the group of
                        <emphasis>intelligent</emphasis>
                        completion engines, i.e., it does not need any training data and thus works with any framework
                        or API out of the box.
                    </para>
                </note>
            </para>
            <para>
                <emphasis>This section is based on the work of Deepak Azad, JDT Committer, source:
                    http://blog.deepakazad.com/2012/05/
                </emphasis>
            </para>
            <section>
                <title>Configuration</title>
                <para>
                    Note that Subwords can not be used together with JDT's or Mylyn's content assist engines. It
                    actually disables itself immediately as soon as it detects that either Mylyn or JDT is enabled on
                    the default content assist list. To use Subwords on the default (first) content assist list, you
                    have to explicitly disable JDT and Mylyn and enable Subwords via
                    <guimenu>Preferences</guimenu>
                    »
                    <guimenuitem>Java</guimenuitem>
                    »
                    <guimenuitem>Editor</guimenuitem>
                    »
                    <guimenuitem>Content Assist</guimenuitem>
                    »
                    <guimenuitem>Advanced</guimenuitem>
                    »
                    <guimenuitem>Default Content Assist</guimenuitem>
                </para>
                <para>
                    Subwords offers a shortcut for doing this enable and disablement automatically. Visit the Subwords
                    preference page to use that shortcut.
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="media/figures/usr/completion/subwords-preferences.png" />
                        </imageobject>
                        <caption>
                            <para> Subwords Preference Page: Configuration Shortcut
                            </para>
                        </caption>
                    </mediaobject>
                </para>
            </section>
        </section>
        <section>
            <title>Chain Completion</title>
            <para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/completion/chain-istatuslinemanager.png" />
                    </imageobject>
                    <caption>
                        <para>
                            Recommenders' Chain Completion on
                            <classname>IStatusLineManager</classname>
                            in a
                            <classname>ViewPart</classname>
                        </para>
                    </caption>
                </mediaobject>
            </para>
            <section>
                <title>Configuration</title>
                <note>
                    <para> Note that Recommenders Chain completion cannot be used on the default (first) content assist
                        list. It actually disables itself immediately as soon as it detects that it was configured for
                        the default list. The main reason for this is, that chain completion is essentially an
                        exhaustive search that consumes a lot of CPU time, and thus, should only run when explicitly
                        requested.
                    </para>
                </note>
                <para>
                    Chain completion allows its search to be configurations for specia situations. To change chain
                    completion's defaults visit its preference page under
                    <guimenu>Preferences</guimenu>
                    »
                    <guimenu>Code Recommenders</guimenu>
                    »
                    <guimenu>Chain</guimenu>
                    :
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="media/figures/usr/completion/chain-preferences.png" />
                        </imageobject>
                        <caption>
                            <para> Chain Completion Preference Page
                            </para>
                        </caption>
                    </mediaobject>
                    <variablelist>
                        <varlistentry>
                            <term>Maximum Number of Chains:</term>
                            <listitem>
                                <para>Limits the number of call chains found to max. Has the effect that search is
                                    immediately terminated after max number of chains have been found. Change this
                                    parameter to gain performance improvements.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Maximum Chains Depth:</term>
                            <listitem>
                                <para>Limits how many levels in the API call graph chain completion traverses to find
                                    matching call chains. Set this to lowerer levels (e.g. three) if you only want chain
                                    completion to find chains of the maximal lenght of three.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Search Timeout (sec):</term>
                            <listitem>
                                <para>API graph traversal uses a time limit when searching for chains. Modify this value
                                    if chain completion does not find the propsoals due to time limits. Please note that
                                    JDT has a built in performance measure and brings up a warning if a content assist
                                    engine needs longer thatn 4.5 seconds.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Types Ignore List:</term>
                            <listitem>
                                <para>
                                    Some type result in far too many proposal, like
                                    <classname>java.ang.String</classname>
                                    . Such types can be explicitly excluded from search by adding them to the ignore
                                    list.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
            </section>
        </section>
    </section>
    <section>
        <title>The Extended Documentation Platform</title>
        <para>Writing documentation is one of those tasks programmers are typically not very keen about. It is
            time-consuming, tedious, and has almost no immediate rewards. Consequently, documentation is (too) often
            incomplete (or even worse) completely outdated.
        </para>
        <para>
            But good and comprehensive documentation is crucial for the success of a library or framework. Tools exist,
            that generate documentation from source code (i.e., extracting obvious information from code and generating
            more or less helpful javadoc comments). Such approaches seem valuable at first, but finally this kind of
            documentation only pleases our manager since it improves on the
            <emphasis role="italic">source code to documentation
            </emphasis>
            ratio; from a developer's point of view this documentation is rather useless.
        </para>
        <para>
            However, there are many other resources out there that offer valuable information about an API.
            Stackoverflow for instance is an abundant source of information providing valuable tips on how to use a
            certain API or deal with errors. Code-search engines offer code snippets showing how to use an API in action
            etc. Many more resources exist. The
            <emphasis role="italic">Extended Documentation Platform</emphasis>
            is solely developed to serve the purpose to aggregate this the wide range of information sources available
            on the web into a single view in Eclipse.
        </para>
        <para>
            The figure below shows the
            <emphasis role="italic">Ext</emphasis>
            ended
            <emphasis role="italic">Doc</emphasis>
            umentation View (
            <emphasis role="italic">Extdoc View
            </emphasis>
            for short). It basically consists of two parts: a provider overview panel on the left and a content area on
            the right in which every provider presents its information is has for a given selection in the workspace or
            active JavaEditor:
        </para>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="media/figures/usr/extdoc/view01.png" contentwidth="15cm" width="15cm" />
                </imageobject>
            </inlinemediaobject>
        </para>
        <para />
        <section>
            <title>Subclassing Directives Provider</title>
            <para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/extdoc/class-overrides.png" />
                    </imageobject>
                    <caption>
                        <para>
                        </para>
                    </caption>
                </mediaobject>
            </para>
        </section>
        <section>
            <title>Self-calls Directives Provider</title>
            <para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/extdoc/method-self.png" />
                    </imageobject>
                    <caption>
                        <para>
                        </para>
                    </caption>
                </mediaobject>
            </para>
        </section>
        <section>
            <title>Example Code Snippets Provider</title>
            <para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="media/figures/usr/extdoc/snippets.png" />
                    </imageobject>
                    <caption>
                        <para>
                        </para>
                    </caption>
                </mediaobject>
            </para>
        </section>
        <section>
            <title>Calls Recommendation Provider</title>
            <para />
        </section>
    </section>
    <section>
        <title>Snipmatch</title>
        <para>Snipmatch is currently moving in an not ready for 1.0.0.</para>
    </section>
    <section>
        <title>Local Code-Search
        </title>
        <para>Recommenders' local code-search engine is also not ready for 1.0.0., and thus, will not be part of the
            Juno release. However, first prototype are available and can be installed from the Recommenders' lab
            channel.
        </para>
    </section>
    <section>
        <title>The Model Repository</title>
        <para>
            Code Recommenders uses precomputed
            <emphasis>recommendation models</emphasis>
            to make its proposals. These models are hosted under
            <uri>http://download.eclipse.org/recommenders/models/«release»</uri>
            and downloaded automatically on first access. Figure
            <xref linkend="fig::preferences" />
            depicts the configuration settings which are explained in details below.
            <mediaobject id="fig::preferences">
                <imageobject>
                    <imagedata fileref="media/figures/usr/general/preferences.png" />
                </imageobject>
                <caption>
                    <para>Recommenders' Model Repository Preference Page</para>
                </caption>
            </mediaobject>
            <variablelist>
                <varlistentry>
                    <term>Model Repository:</term>
                    <listitem>
                        <para>
                            <emphasis></emphasis>
                            The URL of the model repository Code Recommenders searches for new recommendation models
                            when accessed.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Enable Auto-Download:</term>
                    <listitem>
                        <para> If enabled, recommenders downloads suiteable recommendation models automatically. If
                            unchecked no attempts are made to download models from the server.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Clear Caches:</term>
                    <listitem>
                        <para>
                            All previously downloaded models are cached locally under
                            <varname>${workspace}/.metadata/.plugins/org.eclipse.recommenders.rcp/repository/
                            </varname>
                            . When
                            <guibutton>Clear cache</guibutton>
                            is pressed, this directory is deleted. Files that could not be deleted are marked for
                            deletion and will be deleted on Eclipse shutdown. All models are downloaded again
                            automatically on next access.
                            <note>
                                <para>It is recommended to restart Eclipse after clearing the local caches.</para>
                            </note>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
    </section>
</chapter>