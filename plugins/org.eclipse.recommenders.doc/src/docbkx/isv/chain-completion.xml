<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "http://www.docbook.org/xml/5.0/dtd/docbook.dtd">
<section id="isv-chain-completion">
    <title>Call Chain Completion</title>
    <section>
        <title>Example: Call Chain Using a Local Variable</title>
        <para>
            This example briefly illustrates the graph structure used to create call chains by a simple example:
            <programlisting language="java">
        ExecutorService pool = Executors.newCachedThreadPool();
        Future future = $
        </programlisting>
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="media/figures/isv/chain-completion/on-local.png"/>
            </imageobject>
            <caption>Resulting Callchain graph</caption>
        </mediaobject>
    </section>
    <section>
        <title>Design Overview</title>
        <para>
            <orderedlist>
                <title>Class Responsibilities</title>
                <listitem>
                    <simpara>
                        <classname>CallChainCompletionProposalComputer</classname>
                        : Extracts the available information about accessible locals, fields and methods to find all
                        potential entry-points for the
                        <classname>GraphBuilder</classname>
                        .
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <classname>CallChainCompletionProposal</classname>
                        : The proposal that gets executed when the user selects the proposal from code completion
                        window. It internally relies on a (jdt)
                        <classname>Template</classname>
                        built by the
                        <classname>CompletionTemplateBuilder</classname>
                        .
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <classname>CompletionTemplateBuilder</classname>
                        : builds, as the name suggests, the Java template. It does quite a lot JDT internal magic and is
                        considered unclean and yet incomplete (!).
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <classname>GraphBuilder</classname>
                        : Creates the call chain graph. Uses a thread pool internally for building the graph (but not
                        for creating the call chains). This might change?
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <classname>TypeNode</classname>
                        : represents the class node in a call chain. It stores the incoming edges which are later used
                        to travers the graph and build the call chains.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <classname>MemberEdge</classname>
                        : represents a transition from one type to another, typically an IMethod, IType, or
                        ILocalVariable (for entry points only).
                    </simpara>
                </listitem>
            </orderedlist>
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="media/figures/isv/chain-completion/design-overview.png"/>
            </imageobject>
            <caption>Design Overview</caption>
        </mediaobject>
    </section>
</section>